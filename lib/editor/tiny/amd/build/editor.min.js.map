{"version":3,"file":"editor.min.js","sources":["../src/editor.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Utility functions.\n *\n * @module editor_tiny/editor\n * @copyright  2022 Andrew Lyons <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {\n    getTinyMCE,\n} from './loader';\nimport Pending from 'core/pending';\n\n/**\n * Storage for the TinyMCE instances on the page.\n * @type {Map}\n */\nconst instanceMap = new Map();\n\n/**\n * The default editor configuration.\n * @type {Object}\n */\nlet defaultOptions = {};\n\n/**\n * Require the modules for the named set of TinyMCE plugins.\n *\n * @param {string[]} pluginList The list of plugins\n * @return {Promise[]} A matching set of Promises relating to the requested plugins\n */\nconst importPluginList = async(pluginList) => {\n    const pluginHandlers = await Promise.all(pluginList.map(pluginPath => {\n        if (pluginPath.indexOf('/') === -1) {\n            // A standard TinyMCE Plugin.\n            return Promise.resolve(pluginPath);\n        }\n\n        return import(pluginPath);\n    }));\n\n    const pluginNames = pluginHandlers.map((pluginConfig) => {\n        if (typeof pluginConfig === 'string') {\n            return pluginConfig;\n        }\n        if (Array.isArray(pluginConfig)) {\n            return pluginConfig[0];\n        }\n        return null;\n    }).filter((value) => value);\n\n    const pluginConfig = pluginHandlers.map((pluginConfig) => {\n        if (Array.isArray(pluginConfig)) {\n            return pluginConfig[1];\n        }\n        return null;\n    }).filter((value) => value);\n\n    return {\n        pluginNames,\n        pluginConfig,\n    };\n};\n\nconst fetchLanguage = (language) => fetch(\n    `${M.cfg.wwwroot}/lib/editor/tiny/lang.php/${M.cfg.langrev}/${language}`\n).then(response => response.json());\n\nexport const getAllInstances = () => new Map(instanceMap.entries());\n\n/**\n * Get the TinyMCE instance for the specified Node ID.\n *\n * @param {string} elementId\n * @returns {TinyMCE|undefined}\n */\nexport const getInstanceForElementId = elementId => getInstanceForElement(document.getElementById(elementId));\n\n/*\n * Get the TinyMCE instance for the specified HTMLElement.\n *\n * @param {HTMLElement} element\n * @returns {TinyMCE|undefined}\n */\nexport const getInstanceForElement = element => {\n    const instance = instanceMap.get(element);\n    if (instance && instance.removed) {\n        instanceMap.remove(element);\n        return undefined;\n    }\n    return instance;\n};\n\n/**\n * Set up TinyMCE for the selector at the specified HTML Node id.\n *\n * @param {object} config The configuration required to setup the editor\n * @param {string} config.elementId The HTML Node ID\n * @param {Object} config.options The editor plugin configuration\n * @return {Promise<TinyMCE>} The TinyMCE instance\n */\nexport const setupForElementId = ({elementId, options}) => {\n    const target = document.getElementById(elementId);\n    return setupForTarget(target, options);\n};\n\nconst initialisePage = async() => {\n    const lang = document.querySelector('html').lang;\n\n    const [tinyMCE, langData] = await Promise.all([getTinyMCE(), fetchLanguage(lang)]);\n    tinyMCE.addI18n(lang, langData);\n};\ninitialisePage();\n\nconst getPlugins = (options) => {\n    if (options.plugins) {\n        return options.plugins;\n    }\n\n    if (defaultOptions.plugins) {\n        return defaultOptions.plugins;\n    }\n\n    return {};\n};\n\nconst getStandardConfig = (target, tinyMCE, options, plugins) => {\n    const lang = document.querySelector('html').lang;\n    return {\n        // Set the editor target.\n        // https://www.tiny.cloud/docs/tinymce/6/editor-important-options/#target\n        target,\n\n        // Set the language.\n        // https://www.tiny.cloud/docs/tinymce/6/ui-localization/#language\n        language: lang,\n\n        // Load the editor stylesheet into the editor iframe.\n        // https://www.tiny.cloud/docs/tinymce/6/add-css-options/\n        content_css: [\n            options.css,\n        ],\n\n        // Do not convert URLs to relative URLs.\n        // https://www.tiny.cloud/docs/tinymce/6/url-handling/#convert_urls\n        // eslint-disable-next-line camelcase\n        convert_urls: false,\n\n        // Enabled 'advanced' a11y options.\n        // This includes allowing role=\"presentation\" from the image uploader.\n        // https://www.tiny.cloud/docs/tinymce/6/accessibility/\n        // eslint-disable-next-line camelcase\n        a11y_advanced_options: true,\n\n        // Toolbar configuration.\n        // https://www.tiny.cloud/docs/tinymce/6/toolbar-configuration-options/\n        // TODO: Move this configuration to a passed-in option.\n        // eslint-disable-next-line camelcase\n        toolbar_mode: 'sliding',\n        toolbar: [\n            {\n                name: 'history',\n                items: [\n                    'undo',\n                    'redo'\n                ]\n            },\n            {\n                name: 'styles',\n                items: ['styles']\n            },\n            {\n                name: 'formatting',\n                items: [\n                    'bold',\n                    'italic'\n                ]\n            },\n            {\n                name: 'alignment',\n                items: [\n                    'alignleft',\n                    'aligncenter',\n                    'alignright',\n                    'alignjustify'\n                ]\n            },\n            {\n                name: 'indentation',\n                items: [\n                    'outdent',\n                    'indent'\n                ]\n            },\n            {\n                name: 'comments',\n                items: ['addcomment']\n            },\n        ],\n\n        // Menu configuration.\n        // https://www.tiny.cloud/docs/tinymce/6/menus-configuration-options/\n        // TODO: Move this configuration to a passed-in option.\n        menu: {\n        },\n\n        // The list of plugins to include in the instance.\n        // https://www.tiny.cloud/docs/tinymce/6/editor-important-options/#plugins\n        plugins: [\n            ...plugins,\n        ],\n\n        // TODO Add mobile configuration.\n        // Mobile configuration.\n        // https://www.tiny.cloud/docs/tinymce/6/tinymce-for-mobile/\n        // This will include mobile-specific toolbar, and menu options.\n\n        // Skins\n        skin: 'oxide',\n    };\n};\n\n/**\n * Set up TinyMCE for the HTML Element.\n *\n * @param {HTMLElement} target\n * @param {Object} options The editor plugin configuration\n * @return {Promise<TinyMCE>} The TinyMCE instance\n */\nexport const setupForTarget = async(target, options = {}) => {\n    const instance = getInstanceForElement(target);\n    if (instance) {\n        return Promise.resolve(instance);\n    }\n\n    const pendingPromise = new Pending('editor_tiny/editor:setupForTarget');\n\n    const plugins = getPlugins(options);\n    const [tinyMCE, pluginValues] = await Promise.all([\n        getTinyMCE(),\n        importPluginList(Object.keys(plugins)),\n    ]);\n    const {pluginNames, pluginConfig} = pluginValues;\n\n    const instanceConfig = getStandardConfig(target, tinyMCE, options, pluginNames);\n    pluginConfig.forEach((pluginConfig) => {\n        if (typeof pluginConfig.configure === 'function') {\n            Object.assign(instanceConfig, pluginConfig.configure(instanceConfig));\n        }\n    });\n    const [editor] = await tinyMCE.init(instanceConfig);\n\n    // Store the editor instance in the instanceMap and register its removal to remove it.\n    instanceMap.set(target, editor);\n    editor.on('remove', ({target}) => {\n        // Handle removal of the editor from the map on destruction.\n        instanceMap.delete(target.targetElm);\n    });\n\n    // Store the Moodle-specific options in the TinyMCE instance.\n    // TODO: See if there is a more appropriate location for this config.\n    // TinyMCE does support custom configuration options in its EditorOptions but these must be registered and spec'd.\n    editor.moodleOptions = options;\n\n    pendingPromise.resolve();\n    return editor;\n};\n\nexport const configureDefaultEditor = (options = {}) => {\n    defaultOptions = options;\n};\n"],"names":["instanceMap","Map","defaultOptions","importPluginList","async","pluginHandlers","Promise","all","pluginList","map","pluginPath","indexOf","resolve","pluginNames","pluginConfig","Array","isArray","filter","value","entries","elementId","getInstanceForElement","document","getElementById","element","instance","get","removed","remove","_ref","options","target","setupForTarget","lang","querySelector","tinyMCE","langData","language","fetch","M","cfg","wwwroot","langrev","then","response","json","addI18n","initialisePage","getPlugins","plugins","getStandardConfig","content_css","css","convert_urls","a11y_advanced_options","toolbar_mode","toolbar","name","items","menu","skin","pendingPromise","Pending","pluginValues","Object","keys","instanceConfig","forEach","configure","assign","editor","init","set","on","_ref2","delete","targetElm","moodleOptions"],"mappings":"4iBA+BMA,YAAc,IAAIC,QAMpBC,eAAiB,SAQfC,iBAAmBC,MAAAA,mBACfC,qBAAuBC,QAAQC,IAAIC,WAAWC,KAAIC,aACnB,IAA7BA,WAAWC,QAAQ,KAEZL,QAAQM,QAAQF,4NAGbA,4WAAAA,gBAGZG,YAAcR,eAAeI,KAAKK,cACR,iBAAjBA,aACAA,aAEPC,MAAMC,QAAQF,cACPA,aAAa,GAEjB,OACRG,QAAQC,OAAUA,cASd,CACHL,YAAAA,YACAC,aATiBT,eAAeI,KAAKK,cACjCC,MAAMC,QAAQF,cACPA,aAAa,GAEjB,OACRG,QAAQC,OAAUA,mCAYM,IAAM,IAAIjB,IAAID,YAAYmB,4CAQlBC,WAAaC,sBAAsBC,SAASC,eAAeH,kBAQrFC,sBAAwBG,gBAC3BC,SAAWzB,YAAY0B,IAAIF,aAC7BC,WAAYA,SAASE,eAIlBF,SAHHzB,YAAY4B,OAAOJ,0FAcMK,WAACT,UAACA,UAADU,QAAYA,oBACpCC,OAAST,SAASC,eAAeH,kBAChCY,eAAeD,OAAQD,UAGX1B,iBACb6B,KAAOX,SAASY,cAAc,QAAQD,MAErCE,QAASC,gBAAkB9B,QAAQC,IAAI,EAAC,yBA7C5B8B,SA6CwDJ,KA7C3CK,gBAC7BC,EAAEC,IAAIC,6CAAoCF,EAAEC,IAAIE,oBAAWL,WAChEM,MAAKC,UAAYA,SAASC,YAFLR,IAAAA,SA8CnBF,QAAQW,QAAQb,KAAMG,WAE1BW,SAEMC,WAAclB,SACZA,QAAQmB,QACDnB,QAAQmB,QAGf/C,eAAe+C,QACR/C,eAAe+C,QAGnB,GAGLC,kBAAoB,CAACnB,OAAQI,QAASL,QAASmB,WAE1C,CAGHlB,OAAAA,OAIAM,SARSf,SAASY,cAAc,QAAQD,KAYxCkB,YAAa,CACTrB,QAAQsB,KAMZC,cAAc,EAMdC,uBAAuB,EAMvBC,aAAc,UACdC,QAAS,CACL,CACIC,KAAM,UACNC,MAAO,CACH,OACA,SAGR,CACID,KAAM,SACNC,MAAO,CAAC,WAEZ,CACID,KAAM,aACNC,MAAO,CACH,OACA,WAGR,CACID,KAAM,YACNC,MAAO,CACH,YACA,cACA,aACA,iBAGR,CACID,KAAM,cACNC,MAAO,CACH,UACA,WAGR,CACID,KAAM,WACNC,MAAO,CAAC,gBAOhBC,KAAM,GAKNV,QAAS,IACFA,SASPW,KAAM,UAWD5B,eAAiB5B,eAAM2B,YAAQD,+DAAU,SAC5CL,SAAWJ,sBAAsBU,WACnCN,gBACOnB,QAAQM,QAAQa,gBAGrBoC,eAAiB,IAAIC,iBAAQ,qCAE7Bb,QAAUD,WAAWlB,UACpBK,QAAS4B,oBAAsBzD,QAAQC,IAAI,EAC9C,wBACAJ,iBAAiB6D,OAAOC,KAAKhB,aAE3BpC,YAACA,YAADC,aAAcA,cAAgBiD,aAE9BG,eAAiBhB,kBAAkBnB,OAAQI,EAASL,QAASjB,aACnEC,aAAaqD,SAASrD,eACoB,mBAA3BA,aAAasD,WACpBJ,OAAOK,OAAOH,eAAgBpD,aAAasD,UAAUF,0BAGtDI,cAAgBnC,QAAQoC,KAAKL,uBAGpClE,YAAYwE,IAAIzC,OAAQuC,QACxBA,OAAOG,GAAG,UAAUC,YAAC3C,OAACA,cAElB/B,YAAY2E,OAAO5C,OAAO6C,cAM9BN,OAAOO,cAAgB/C,QAEvB+B,eAAejD,UACR0D,+EAG2B,eAACxC,+DAAU,GAC7C5B,eAAiB4B"}