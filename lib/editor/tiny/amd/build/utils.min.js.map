{"version":3,"file":"utils.min.js","sources":["../src/utils.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {renderForPromise} from 'core/templates';\n\n/**\n * Get the image path for the specified image.\n *\n * @param {string} identifier The name of the image\n * @param {string} component The component name\n * @return {string} The image URL path\n */\nexport const getImagePath = (identifier, component = 'editor_tiny') => Promise.resolve(M.util.image_url(identifier, component));\n\nexport const getButtonImage = async(identifier, component = 'editor_tiny') => renderForPromise('editor_tiny/toolbar_button', {\n    image: await getImagePath(identifier, component),\n});\n\n/**\n * Get the plugin configuration for the specified plugin.\n *\n * @param {TinyMCE} editor\n * @param {string} plugin\n * @returns {object} The plugin configuration\n */\nexport const getPluginConfiguration = (editor, plugin) => {\n    const config = editor.moodleOptions.plugins[`tiny_${plugin}/plugin`]?.config;\n\n    if (!config) {\n        return {};\n    }\n\n    return config;\n};\n\n/**\n * Helper to display a filepicker and return a Promise.\n *\n * The Promise will resolve when a file is selected, or reject if the file type is not found.\n *\n * @param {TinyMCE} editor\n * @param {string} filetype\n * @returns {Promise<object>} The file object returned by the filepicker\n */\nexport const displayFilepicker = (editor, filetype) => new Promise((resolve, reject) => {\n    if (editor.moodleOptions.filepicker[filetype]) {\n        const options = {\n            ...editor.moodleOptions.filepicker[filetype],\n            formcallback: resolve,\n        };\n        M.core_filepicker.show(Y, options);\n        return;\n    }\n    reject(`Unknown filetype ${filetype}`);\n});\n"],"names":["getImagePath","identifier","component","Promise","resolve","M","util","image_url","async","image","editor","plugin","config","moodleOptions","plugins","_editor$moodleOptions","filetype","reject","filepicker","options","formcallback","core_filepicker","show","Y"],"mappings":"qQAwBaA,aAAe,SAACC,gBAAYC,iEAAY,qBAAkBC,QAAQC,QAAQC,EAAEC,KAAKC,UAAUN,WAAYC,wEAEtFM,eAAMP,gBAAYC,iEAAY,qBAAkB,+BAAiB,6BAA8B,CACzHO,YAAaT,aAAaC,WAAYC,8CAUJ,CAACQ,OAAQC,0CACrCC,qCAASF,OAAOG,cAAcC,uBAAgBH,2DAArCI,sBAAuDH,cAEjEA,QACM,+BAekB,CAACF,OAAQM,WAAa,IAAIb,SAAQ,CAACC,QAASa,aACrEP,OAAOG,cAAcK,WAAWF,iBAC1BG,QAAU,IACTT,OAAOG,cAAcK,WAAWF,UACnCI,aAAchB,SAElBC,EAAEgB,gBAAgBC,KAAKC,EAAGJ,cAG9BF,kCAA2BD"}