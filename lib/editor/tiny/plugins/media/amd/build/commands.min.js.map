{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Media commands.\n *\n * @module      tiny_media/commands\n * @copyright   2022 Huong Nguyen <huongnv13@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_string as getString} from 'core/str';\nimport {\n    component,\n    imageButtonName,\n    videoButtonName,\n} from './common';\nimport {MediaImage} from './image';\nimport {MediaEmbed} from './embed';\n\nexport const getSetup = async() => {\n    const [\n        imageButtonText,\n        videoButtonText,\n    ] = await Promise.all([\n        getString('imagebuttontitle', component),\n        getString('videobuttontitle', component),\n    ]);\n\n    return (editor) => {\n        const mediaImage = new MediaImage(editor);\n        const mediaEmbed = new MediaEmbed(editor);\n        const imageIcon = 'image';\n        const videoIcon = 'embed';\n\n        // Register the Menu Button as a toggle.\n        // This means that when highlighted over an existing Media Image element it will show as toggled on.\n        editor.ui.registry.addToggleButton(imageButtonName, {\n            icon: imageIcon,\n            text: imageButtonText,\n            tooltip: imageButtonText,\n            onAction: () => {mediaImage.displayDialogue();},\n            onSetup: api => {\n                return editor.selection.selectorChangedWithUnbind(\n                    'img:not([data-mce-object]):not([data-mce-placeholder]),figure.image',\n                    api.setActive\n                ).unbind;\n            }\n        });\n\n        editor.ui.registry.addMenuItem(imageButtonName, {\n            icon: imageIcon,\n            text: imageButtonText,\n            onAction: () => {mediaImage.displayDialogue();}\n        });\n\n        editor.ui.registry.addContextToolbar(imageButtonName, {\n            predicate: node => {\n                return node.nodeName.toLowerCase() === 'img';\n            },\n            items: imageButtonName,\n            position: 'node',\n            scope: 'node'\n        });\n\n        // Register the Menu Button as a toggle.\n        // This means that when highlighted over an existing Media Video element it will show as toggled on.\n        editor.ui.registry.addToggleButton(videoButtonName, {\n            icon: videoIcon,\n            text: videoButtonText,\n            onAction: () => {mediaEmbed.displayDialogue();},\n            onSetup: api => {\n                return editor.selection.selectorChangedWithUnbind(\n                    'video:not([data-mce-object]):not([data-mce-placeholder]),' +\n                    'audio:not([data-mce-object]):not([data-mce-placeholder])',\n                    api.setActive\n                ).unbind;\n            }\n        });\n\n        editor.ui.registry.addMenuItem(videoButtonName, {\n            icon: videoIcon,\n            text: videoButtonText,\n            onAction: () => {mediaImage.displayDialogue();}\n        });\n\n        editor.ui.registry.addContextToolbar(videoButtonName, {\n            predicate: node => {\n                return node.nodeName.toLowerCase() === 'video' || node.nodeName.toLowerCase() === 'audio';\n            },\n            items: videoButtonName,\n            position: 'node',\n            scope: 'node'\n        });\n    };\n};\n"],"names":["async","imageButtonText","videoButtonText","Promise","all","component","editor","mediaImage","MediaImage","mediaEmbed","MediaEmbed","ui","registry","addToggleButton","imageButtonName","icon","text","tooltip","onAction","displayDialogue","onSetup","api","selection","selectorChangedWithUnbind","setActive","unbind","addMenuItem","addContextToolbar","predicate","node","nodeName","toLowerCase","items","position","scope","videoButtonName"],"mappings":"qOAgCwBA,gBAEhBC,gBACAC,uBACMC,QAAQC,IAAI,EAClB,mBAAU,mBAAoBC,oBAC9B,mBAAU,mBAAoBA,4BAG1BC,eACEC,WAAa,IAAIC,kBAAWF,QAC5BG,WAAa,IAAIC,kBAAWJ,QAMlCA,OAAOK,GAAGC,SAASC,gBAAgBC,wBAAiB,CAChDC,KANc,QAOdC,KAAMf,gBACNgB,QAAShB,gBACTiB,SAAU,KAAOX,WAAWY,mBAC5BC,QAASC,KACEf,OAAOgB,UAAUC,0BACpB,sEACAF,IAAIG,WACNC,SAIVnB,OAAOK,GAAGC,SAASc,YAAYZ,wBAAiB,CAC5CC,KAnBc,QAoBdC,KAAMf,gBACNiB,SAAU,KAAOX,WAAWY,qBAGhCb,OAAOK,GAAGC,SAASe,kBAAkBb,wBAAiB,CAClDc,UAAWC,MACgC,QAAhCA,KAAKC,SAASC,cAEzBC,MAAOlB,wBACPmB,SAAU,OACVC,MAAO,SAKX5B,OAAOK,GAAGC,SAASC,gBAAgBsB,wBAAiB,CAChDpB,KAnCc,QAoCdC,KAAMd,gBACNgB,SAAU,KAAOT,WAAWU,mBAC5BC,QAASC,KACEf,OAAOgB,UAAUC,0BACpB,oHAEAF,IAAIG,WACNC,SAIVnB,OAAOK,GAAGC,SAASc,YAAYS,wBAAiB,CAC5CpB,KAhDc,QAiDdC,KAAMd,gBACNgB,SAAU,KAAOX,WAAWY,qBAGhCb,OAAOK,GAAGC,SAASe,kBAAkBQ,wBAAiB,CAClDP,UAAWC,MACgC,UAAhCA,KAAKC,SAASC,eAA6D,UAAhCF,KAAKC,SAASC,cAEpEC,MAAOG,wBACPF,SAAU,OACVC,MAAO"}