{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Media commands.\n *\n * @module      tiny_media/commands\n * @copyright   2022 Huong Nguyen <huongnv13@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_strings as getStrings} from 'core/str';\nimport {\n    component,\n    imageButtonName,\n    videoButtonName,\n} from './common';\nimport {MediaImage} from './image';\nimport {MediaEmbed} from './embed';\n\nconst isImage = (node) => node.nodeName.toLowerCase() === 'img';\nconst isVideo = (node) => node.nodeName.toLowerCase() === 'video' || node.nodeName.toLowerCase() === 'audio';\n\nexport const getSetup = async() => {\n    const [\n        imageButtonText,\n        videoButtonText,\n    ] = await getStrings(['imagebuttontitle', 'videobuttontitle'].map((key) => ({key, component})));\n\n    return (editor) => {\n        const imageIcon = 'image';\n        const videoIcon = 'embed';\n\n        const handleImageAction = () => {\n            const mediaImage = new MediaImage(editor);\n            mediaImage.displayDialogue();\n        };\n\n        const handleEmbedAction = () => {\n            const mediaImage = new MediaEmbed(editor);\n            mediaImage.displayDialogue();\n        };\n\n        // Register the Menu Button as a toggle.\n        // This means that when highlighted over an existing Media Image element it will show as toggled on.\n        editor.ui.registry.addToggleButton(imageButtonName, {\n            icon: imageIcon,\n            tooltip: imageButtonText,\n            onAction: handleImageAction,\n            onSetup: api => {\n                return editor.selection.selectorChangedWithUnbind(\n                    'img:not([data-mce-object]):not([data-mce-placeholder]),figure.image',\n                    api.setActive\n                ).unbind;\n            }\n        });\n\n        editor.ui.registry.addMenuItem(imageButtonName, {\n            icon: imageIcon,\n            text: imageButtonText,\n            onAction: handleImageAction,\n        });\n\n        editor.ui.registry.addContextToolbar(imageButtonName, {\n            predicate: isImage,\n            items: imageButtonName,\n            position: 'node',\n            scope: 'node'\n        });\n\n        editor.ui.registry.addContextMenu(imageButtonName, {\n            update: isImage,\n        });\n\n        // Register the Menu Button as a toggle.\n        // This means that when highlighted over an existing Media Video element it will show as toggled on.\n        editor.ui.registry.addToggleButton(videoButtonName, {\n            icon: videoIcon,\n            tooltip: videoButtonText,\n            onAction: handleEmbedAction,\n            onSetup: api => {\n                return editor.selection.selectorChangedWithUnbind(\n                    'video:not([data-mce-object]):not([data-mce-placeholder]),' +\n                    'audio:not([data-mce-object]):not([data-mce-placeholder])',\n                    api.setActive\n                ).unbind;\n            }\n        });\n\n        editor.ui.registry.addMenuItem(videoButtonName, {\n            icon: videoIcon,\n            text: videoButtonText,\n            onAction: handleEmbedAction,\n        });\n\n        editor.ui.registry.addContextMenu(videoButtonName, {\n            update: isVideo,\n        });\n\n        editor.ui.registry.addContextToolbar(videoButtonName, {\n            predicate: isVideo,\n            items: videoButtonName,\n            position: 'node',\n            scope: 'node'\n        });\n    };\n};\n"],"names":["isImage","node","nodeName","toLowerCase","isVideo","async","imageButtonText","videoButtonText","map","key","component","editor","handleImageAction","MediaImage","displayDialogue","handleEmbedAction","MediaEmbed","ui","registry","addToggleButton","imageButtonName","icon","tooltip","onAction","onSetup","api","selection","selectorChangedWithUnbind","setActive","unbind","addMenuItem","text","addContextToolbar","predicate","items","position","scope","addContextMenu","update","videoButtonName"],"mappings":";;;;;;;;MAgCMA,QAAWC,MAAyC,QAAhCA,KAAKC,SAASC,cAClCC,QAAWH,MAAyC,UAAhCA,KAAKC,SAASC,eAA6D,UAAhCF,KAAKC,SAASC,gCAE3DE,gBAEhBC,gBACAC,uBACM,oBAAW,CAAC,mBAAoB,oBAAoBC,KAAKC,OAAUA,IAAAA,IAAKC,UAAAA,8BAE1EC,eAIEC,kBAAoB,KACH,IAAIC,kBAAWF,QACvBG,mBAGTC,kBAAoB,KACH,IAAIC,kBAAWL,QACvBG,mBAKfH,OAAOM,GAAGC,SAASC,gBAAgBC,wBAAiB,CAChDC,KAhBc,QAiBdC,QAAShB,gBACTiB,SAAUX,kBACVY,QAASC,KACEd,OAAOe,UAAUC,0BACpB,sEACAF,IAAIG,WACNC,SAIVlB,OAAOM,GAAGC,SAASY,YAAYV,wBAAiB,CAC5CC,KA5Bc,QA6BdU,KAAMzB,gBACNiB,SAAUX,oBAGdD,OAAOM,GAAGC,SAASc,kBAAkBZ,wBAAiB,CAClDa,UAAWjC,QACXkC,MAAOd,wBACPe,SAAU,OACVC,MAAO,SAGXzB,OAAOM,GAAGC,SAASmB,eAAejB,wBAAiB,CAC/CkB,OAAQtC,UAKZW,OAAOM,GAAGC,SAASC,gBAAgBoB,wBAAiB,CAChDlB,KA9Cc,QA+CdC,QAASf,gBACTgB,SAAUR,kBACVS,QAASC,KACEd,OAAOe,UAAUC,0BACpB,oHAEAF,IAAIG,WACNC,SAIVlB,OAAOM,GAAGC,SAASY,YAAYS,wBAAiB,CAC5ClB,KA3Dc,QA4DdU,KAAMxB,gBACNgB,SAAUR,oBAGdJ,OAAOM,GAAGC,SAASmB,eAAeE,wBAAiB,CAC/CD,OAAQlC,UAGZO,OAAOM,GAAGC,SAASc,kBAAkBO,wBAAiB,CAClDN,UAAW7B,QACX8B,MAAOK,wBACPJ,SAAU,OACVC,MAAO"}