{"version":3,"file":"embed.min.js","sources":["../src/embed.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Media plugin Embed class for Moodle.\n *\n * @module      tiny_media/embed\n * @copyright   2022 Huong Nguyen <huongnv13@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport {\n    get_string as getString,\n    get_strings as getStrings,\n} from 'core/str';\nimport * as ModalFactory from 'core/modal_factory';\nimport * as ModalEvents from 'core/modal_events';\nimport {displayFilepicker} from 'editor_tiny/utils';\nimport {getMoodleLang} from 'editor_tiny/options';\nimport {component} from \"./common\";\nimport Modal from './embedmodal';\n\n\nconst MEDIA_TYPES = {\n    LINK: 'LINK',\n    VIDEO: 'VIDEO',\n    AUDIO: 'AUDIO',\n};\n\nconst TRACK_KINDS = {\n    SUBTITLES: 'SUBTITLES',\n    CAPTIONS: 'CAPTIONS',\n    DESCRIPTIONS: 'DESCRIPTIONS',\n    CHAPTERS: 'CHAPTERS',\n    METADATA: 'METADATA',\n};\n\n// TODO Move all of these into the tempaltes themselves.\n// We should use class names within templates rather than passing variables because styles are\n// the property of the theme owner.\n// We should use data attributes as selectors because they are the property of of the JS.\nconst CSS = {\n    FORM: 'form.tiny_media_form',\n    SOURCE: 'tiny_media_source',\n    TRACK: 'tiny_media_track',\n    MEDIA_SOURCE: 'tiny_media_media_source',\n    MEDIA_BROWSER: 'openmediabrowser',\n    LINK_SOURCE: 'tiny_media_link_source',\n    POSTER_SOURCE: 'tiny_media_poster_source',\n    TRACK_SOURCE: 'tiny_media_track_source',\n    DISPLAY_OPTIONS: 'tiny_media_display_options',\n    NAME_INPUT: 'tiny_media_name_entry',\n    TITLE_INPUT: 'tiny_media_title_entry',\n    URL_INPUT: 'tiny_media_url_entry',\n    POSTER_SIZE: 'tiny_media_poster_size',\n    LINK_SIZE: 'tiny_media_link_size',\n    WIDTH_INPUT: 'tiny_media_width_entry',\n    HEIGHT_INPUT: 'tiny_media_height_entry',\n    TRACK_KIND_INPUT: 'tiny_media_track_kind_entry',\n    TRACK_LABEL_INPUT: 'tiny_media_track_label_entry',\n    TRACK_LANG_INPUT: 'tiny_media_track_lang_entry',\n    TRACK_DEFAULT_SELECT: 'tiny_media_track_default',\n    MEDIA_CONTROLS_TOGGLE: 'tiny_media_controls',\n    MEDIA_AUTOPLAY_TOGGLE: 'tiny_media_autoplay',\n    MEDIA_MUTE_TOGGLE: 'tiny_media_mute',\n    MEDIA_LOOP_TOGGLE: 'tiny_media_loop',\n    ADVANCED_SETTINGS: 'tiny_media_advancedsettings',\n    INPUTSUBMIT: 'tiny_media_submit',\n    LINK: MEDIA_TYPES.LINK.toLowerCase(),\n    VIDEO: MEDIA_TYPES.VIDEO.toLowerCase(),\n    AUDIO: MEDIA_TYPES.AUDIO.toLowerCase(),\n    TRACK_SUBTITLES: TRACK_KINDS.SUBTITLES.toLowerCase(),\n    TRACK_CAPTIONS: TRACK_KINDS.CAPTIONS.toLowerCase(),\n    TRACK_DESCRIPTIONS: TRACK_KINDS.DESCRIPTIONS.toLowerCase(),\n    TRACK_CHAPTERS: TRACK_KINDS.CHAPTERS.toLowerCase(),\n    TRACK_METADATA: TRACK_KINDS.METADATA.toLowerCase(),\n};\n\nconst SELECTORS = {\n    SOURCE: `.${CSS.SOURCE}`,\n    TRACK: `.${CSS.TRACK}`,\n    MEDIA_SOURCE: `.${CSS.MEDIA_SOURCE}`,\n    MEDIA_BROWSER: `.${CSS.MEDIA_BROWSER}`,\n    POSTER_SOURCE: `.${CSS.POSTER_SOURCE}`,\n    TRACK_SOURCE: `.${CSS.TRACK_SOURCE}`,\n    DISPLAY_OPTIONS: `.${CSS.DISPLAY_OPTIONS}`,\n    NAME_INPUT: `.${CSS.NAME_INPUT}`,\n    TITLE_INPUT: `.${CSS.TITLE_INPUT}`,\n    URL_INPUT: `.${CSS.URL_INPUT}`,\n    POSTER_SIZE: `.${CSS.POSTER_SIZE}`,\n    LINK_SIZE: `.${CSS.LINK_SIZE}`,\n    WIDTH_INPUT: `.${CSS.WIDTH_INPUT}`,\n    HEIGHT_INPUT: `.${CSS.HEIGHT_INPUT}`,\n    TRACK_KIND_INPUT: `.${CSS.TRACK_KIND_INPUT}`,\n    TRACK_LABEL_INPUT: `.${CSS.TRACK_LABEL_INPUT}`,\n    TRACK_LANG_INPUT: `.${CSS.TRACK_LANG_INPUT}`,\n    TRACK_DEFAULT_SELECT: `.${CSS.TRACK_DEFAULT_SELECT}`,\n    MEDIA_CONTROLS_TOGGLE: `.${CSS.MEDIA_CONTROLS_TOGGLE}`,\n    MEDIA_AUTOPLAY_TOGGLE: `.${CSS.MEDIA_AUTOPLAY_TOGGLE}`,\n    MEDIA_MUTE_TOGGLE: `.${CSS.MEDIA_MUTE_TOGGLE}`,\n    MEDIA_LOOP_TOGGLE: `.${CSS.MEDIA_LOOP_TOGGLE}`,\n    ADVANCED_SETTINGS: `.${CSS.ADVANCED_SETTINGS}`,\n    INPUTSUBMIT: `.${CSS.INPUTSUBMIT}`,\n    LINK_TAB: `li[data-medium-type=\"${CSS.LINK}\"]`,\n    LINK_PANE: `.tab-pane[data-medium-type=\"${CSS.LINK}\"]`,\n    VIDEO_TAB: `li[data-medium-type=\"${CSS.VIDEO}\"]`,\n    VIDEO_PANE: `.tab-pane[data-medium-type=\"${CSS.VIDEO}\"]`,\n    AUDIO_TAB: `li[data-medium-type=\"${CSS.AUDIO}\"]`,\n    AUDIO_PANE: `.tab-pane[data-medium-type=\"${CSS.AUDIO}\"]`,\n    TRACK_SUBTITLES_TAB: `li[data-track-kind=\"${CSS.TRACK_SUBTITLES}\"]`,\n    TRACK_SUBTITLES_PANE: `.tab-pane[data-track-kind=\"${CSS.TRACK_SUBTITLES}\"]`,\n    TRACK_CAPTIONS_TAB: `li[data-track-kind=\"${CSS.TRACK_CAPTIONS}\"]`,\n    TRACK_CAPTIONS_PANE: `.tab-pane[data-track-kind=\"${CSS.TRACK_CAPTIONS}\"]`,\n    TRACK_DESCRIPTIONS_TAB: `li[data-track-kind=\"${CSS.TRACK_DESCRIPTIONS}\"]`,\n    TRACK_DESCRIPTIONS_PANE: `.tab-pane[data-track-kind=\"${CSS.TRACK_DESCRIPTIONS}\"]`,\n    TRACK_CHAPTERS_TAB: `li[data-track-kind=\"${CSS.TRACK_CHAPTERS}\"]`,\n    TRACK_CHAPTERS_PANE: `.tab-pane[data-track-kind=\"${CSS.TRACK_CHAPTERS}\"]`,\n    TRACK_METADATA_TAB: `li[data-track-kind=\"${CSS.TRACK_METADATA}\"]`,\n    TRACK_METADATA_PANE: `.tab-pane[data-track-kind=\"${CSS.TRACK_METADATA}\"]`,\n};\n\nexport const MediaEmbed = class {\n    editor = null;\n    canShowFilePicker = true;\n\n    constructor(editor) {\n        this.editor = editor;\n    }\n\n    async getTemplateContext() {\n        const [\n            addSourceHelpString,\n            tracksHelpString,\n            subtitlesHelpString,\n            captionsHelpString,\n            descriptionsHelpString,\n            chaptersHelpString,\n            metadataHelpString,\n        ] = await getStrings([\n            'addsource_help',\n            'tracks_help',\n            'subtitles_help',\n            'captions_help',\n            'descriptions_help',\n            'chapters_help',\n            'metadata_help',\n        ].map((key) => ({\n            key,\n            component,\n        })));\n\n        const languages = this.prepareMoodleLang();\n        return {\n            elementid: this.editor.getElement().id,\n            CSS: CSS,\n            showfilepicker: this.canShowFilePicker,\n            addsourcehelpicon: {\n                text: addSourceHelpString,\n            },\n            trackshelpicon: {\n                text: tracksHelpString,\n            },\n            subtitleshelpicon: {\n                text: subtitlesHelpString,\n            },\n            captionshelpicon: {\n                text: captionsHelpString,\n            },\n            descriptionshelpicon: {\n                text: descriptionsHelpString,\n            },\n            chaptershelpicon: {\n                text: chaptersHelpString,\n            },\n            metadatahelpicon: {\n                text: metadataHelpString,\n            },\n            langsinstalled: languages.installed,\n            langsavailable: languages.available,\n        };\n    }\n\n    async displayDialogue() {\n        const modal = await ModalFactory.create({\n            type: Modal.TYPE,\n            title: getString('createmedia', 'tiny_media'),\n            templateContext: await this.getTemplateContext(),\n            removeOnClose: true,\n            large: true,\n        });\n\n        this.applyMediumProperties(modal);\n        this.registerEventListeners(modal);\n        modal.show();\n    }\n\n    getSelectedMedia() {\n        let mediaElm = this.editor.selection.getNode();\n\n        if (!mediaElm) {\n            return null;\n        }\n\n        if (mediaElm.nodeName.toLowerCase() === 'video' || mediaElm.nodeName.toLowerCase() === 'audio') {\n            return mediaElm;\n        }\n\n        if (mediaElm.querySelector('video')) {\n            return mediaElm.querySelector('video');\n        }\n\n        if (mediaElm.querySelector('audio')) {\n            return mediaElm.querySelector('audio');\n        }\n\n        return null;\n    }\n\n    getMediumProperties() {\n        const boolAttr = (elem, attr) => {\n            // As explained in MDL-64175, some OS (like Ubuntu), are removing the value for these attributes.\n            // So in order to check if attr=\"true\", we need to check if the attribute exists and if the value is empty or true.\n            return (elem.hasAttribute(attr) && (elem.getAttribute(attr) || elem.getAttribute(attr) === ''));\n        };\n\n        let tracks = {\n            subtitles: [],\n            captions: [],\n            descriptions: [],\n            chapters: [],\n            metadata: []\n        };\n        let sources = [];\n\n        const medium = this.getSelectedMedia();\n        if (!medium) {\n            return null;\n        }\n        medium.querySelectorAll('track').forEach(track => {\n            tracks[track.getAttribute('kind')].push({\n                src: track.getAttribute('src'),\n                srclang: track.getAttribute('srclang'),\n                label: track.getAttribute('label'),\n                defaultTrack: boolAttr(track, 'default')\n            });\n        });\n\n        medium.querySelectorAll('source').forEach(source => {\n            sources.push(source.src);\n        });\n\n        return {\n            type: medium.nodeName.toLowerCase() === 'video' ? MEDIA_TYPES.VIDEO : MEDIA_TYPES.AUDIO,\n            sources: sources,\n            poster: medium.getAttribute('poster'),\n            title: medium.getAttribute('title'),\n            width: medium.getAttribute('width'),\n            height: medium.getAttribute('height'),\n            autoplay: boolAttr(medium, 'autoplay'),\n            loop: boolAttr(medium, 'loop'),\n            muted: boolAttr(medium, 'muted'),\n            controls: boolAttr(medium, 'controls'),\n            tracks: tracks\n        };\n    }\n\n    async applyMediumProperties(modal) {\n        // Ideally we should do this by passing in the values as the template context.\n        // We should modify the template to make use of these values.\n        await modal.getBody();\n        const root = modal.getRoot()[0];\n        const properties = this.getMediumProperties();\n        if (!properties) {\n            return;\n        }\n\n        const applyTrackProperties = (track, properties) => {\n            track.querySelector(SELECTORS.TRACK_SOURCE + ' ' + SELECTORS.URL_INPUT).value = properties.src;\n            track.querySelector(SELECTORS.TRACK_LANG_INPUT).value = properties.srclang;\n            track.querySelector(SELECTORS.TRACK_LABEL_INPUT).value = properties.label;\n            track.querySelector(SELECTORS.TRACK_DEFAULT_SELECT).checked = properties.defaultTrack;\n        };\n\n        const paneId = `${this.editor.getElement().id}_${properties.type.toLowerCase()}`;\n        const tabPane = root.querySelector(`.root.tab-content > .tab-pane#${paneId}`);\n\n        // Populate sources.\n        tabPane.querySelector(SELECTORS.MEDIA_SOURCE + ' ' + SELECTORS.URL_INPUT).value = properties.sources[0];\n        properties.sources.slice(1).forEach(source => {\n            this.addMediaSourceComponent(tabPane.querySelector(SELECTORS.MEDIA_SOURCE + ' .addcomponent'), newComponent => {\n                newComponent.querySelector(SELECTORS.URL_INPUT).value = source;\n            });\n        });\n\n        // Populate tracks.\n        for (const [key, value] of Object.entries(properties.tracks)) {\n            const trackData = value.length ? value : [{src: '', srclang: '', label: '', defaultTrack: false}];\n            const paneSelector = SELECTORS['TRACK_' + key.toUpperCase() + '_PANE'];\n\n            applyTrackProperties(tabPane.querySelector(paneSelector + ' ' + SELECTORS.TRACK), trackData[0]);\n            trackData.slice(1).forEach(track => {\n                this.addTrackComponent(\n                    tabPane.querySelector(paneSelector + ' ' + SELECTORS.TRACK + ' .addcomponent'), newComponent => {\n                        applyTrackProperties(newComponent, track);\n                    });\n            });\n        }\n\n        // Populate values.\n        tabPane.querySelector(SELECTORS.TITLE_INPUT).value = properties.title;\n        tabPane.querySelector(SELECTORS.MEDIA_CONTROLS_TOGGLE).checked = properties.controls;\n        tabPane.querySelector(SELECTORS.MEDIA_AUTOPLAY_TOGGLE).checked = properties.autoplay;\n        tabPane.querySelector(SELECTORS.MEDIA_MUTE_TOGGLE).checked = properties.muted;\n        tabPane.querySelector(SELECTORS.MEDIA_LOOP_TOGGLE).checked = properties.loop;\n\n        // Determine medium type.\n        const mediumType = this.getMediumTypeFromTabPane(tabPane);\n\n        if (mediumType === 'video') {\n            // Populate values unique for video.\n            tabPane.querySelector(SELECTORS.POSTER_SOURCE + ' ' + SELECTORS.URL_INPUT).value = properties.poster;\n            tabPane.querySelector(SELECTORS.WIDTH_INPUT).value = properties.width;\n            tabPane.querySelector(SELECTORS.HEIGHT_INPUT).value = properties.height;\n        }\n\n        // Switch to the correct tab.\n        // Remove active class from all tabs + tab panes.\n        tabPane.parentElement.querySelector('.active').classList.remove('active');\n        root.querySelectorAll('.root.nav-tabs .nav-item a').forEach(item => {\n            item.classList.remove('active');\n        });\n\n        // Add active class to the desired tab and tab pane.\n        tabPane.classList.add('active');\n        root.querySelector(SELECTORS[mediumType.toUpperCase() + '_TAB'] + ' a').classList.add('active');\n    }\n\n    prepareMoodleLang() {\n        const moodleLangs = getMoodleLang(this.editor);\n        const currentLang = moodleLangs.currentlang;\n\n        const installed = Object.entries(moodleLangs.installed).map(([lang, code]) => ({\n            lang,\n            code,\n            \"default\": lang === currentLang,\n        }));\n\n        const available = Object.entries(moodleLangs.available).map(([lang, code]) => ({\n            lang,\n            code,\n            \"default\": lang === currentLang,\n        }));\n\n        return {\n            installed,\n            available,\n        };\n    }\n\n    getMoodleLangObj(subtitleLang) {\n        const {available} = getMoodleLang(this.editor);\n\n        if (available[subtitleLang]) {\n            return {\n                lang: subtitleLang,\n                code: available[subtitleLang],\n            };\n        }\n\n        return null;\n    }\n\n    filePickerCallback(params, element, fpType) {\n        if (params.url !== '') {\n            const tabPane = element.closest('.tab-pane');\n            element.closest(SELECTORS.SOURCE).querySelector(SELECTORS.URL_INPUT).value = params.url;\n\n            if (tabPane.id === this.editor.getElement().id + '_' + CSS.LINK) {\n                tabPane.querySelector(SELECTORS.NAME_INPUT).value = params.file;\n            }\n\n            if (fpType === 'subtitle') {\n                // TODO wtf does this do!? lol\n                const subtitleLang = params.file.split('.vtt')[0].split('-').slice(-1)[0];\n                const langObj = this.getMoodleLangObj(subtitleLang);\n                if (langObj) {\n                    const track = element.closest(SELECTORS.TRACK);\n                    track.querySelector(SELECTORS.TRACK_LABEL_INPUT).value = langObj.lang.trim();\n                    track.querySelector(SELECTORS.TRACK_LANG_INPUT).value = langObj.code;\n                }\n            }\n        }\n    }\n\n    addMediaSourceComponent(element, callback) {\n        const sourceElement = element.closest(SELECTORS.SOURCE + SELECTORS.MEDIA_SOURCE);\n        const clone = sourceElement.cloneNode(true);\n\n        sourceElement.querySelector('.removecomponent-wrapper').classList.remove('hidden');\n        sourceElement.querySelector('.addcomponent-wrapper').classList.add('hidden');\n\n        sourceElement.parentNode.insertBefore(clone, sourceElement.nextSibling);\n\n        if (callback) {\n            callback(clone);\n        }\n    }\n\n    removeMediaSourceComponent(element) {\n        const sourceElement = element.closest(SELECTORS.SOURCE + SELECTORS.MEDIA_SOURCE);\n        sourceElement.remove();\n    }\n\n    addTrackComponent(element, callback) {\n        const trackElement = element.closest(SELECTORS.TRACK);\n        const clone = trackElement.cloneNode(true);\n\n        trackElement.querySelector('.removecomponent-wrapper').classList.remove('hidden');\n        trackElement.querySelector('.addcomponent-wrapper').classList.add('hidden');\n\n        trackElement.parentNode.insertBefore(clone, trackElement.nextSibling);\n\n        if (callback) {\n            callback(clone);\n        }\n    }\n\n    removeTrackComponent(element) {\n        const sourceElement = element.closest(SELECTORS.TRACK);\n        sourceElement.remove();\n    }\n\n    getMediumTypeFromTabPane(tabPane) {\n        return tabPane.getAttribute('data-medium-type');\n    }\n\n    getTrackTypeFromTabPane(tabPane) {\n        return tabPane.getAttribute('data-track-kind');\n    }\n\n    getMediaHTML(form) {\n        const mediumType = this.getMediumTypeFromTabPane(form.querySelector('.root.tab-content > .tab-pane.active'));\n        const tabContent = form.querySelector(SELECTORS[mediumType.toUpperCase() + '_PANE']);\n\n        return this['getMediaHTML' + mediumType[0].toUpperCase() + mediumType.substr(1)](tabContent);\n    }\n\n    getMediaHTMLLink(tab) {\n        const context = {\n            url: tab.querySelector(SELECTORS.URL_INPUT).value,\n            name: tab.querySelector(SELECTORS.NAME_INPUT).value || false\n        };\n\n        return context.url ? Templates.renderForPromise('tiny_media/embed_media_link', context) : '';\n    }\n\n    getMediaHTMLVideo(tab) {\n        const context = this.getContextForMediaHTML(tab);\n        context.width = tab.querySelector(SELECTORS.WIDTH_INPUT).value || false;\n        context.height = tab.querySelector(SELECTORS.HEIGHT_INPUT).value || false;\n        context.poster = tab.querySelector(SELECTORS.POSTER_SOURCE + ' ' + SELECTORS.URL_INPUT).value || false;\n\n        return context.sources.length ? Templates.renderForPromise('tiny_media/embed_media_video', context) : '';\n    }\n\n    getMediaHTMLAudio(tab) {\n        let context = this.getContextForMediaHTML(tab);\n\n        return context.sources.length ? Templates.renderForPromise('tiny_media/embed_media_audio', context) : '';\n    }\n\n    getContextForMediaHTML(tab) {\n        const tracks = Array.from(tab.querySelectorAll(SELECTORS.TRACK)).map(track => ({\n                track: track.querySelector(SELECTORS.TRACK_SOURCE + ' ' + SELECTORS.URL_INPUT).value,\n                kind: this.getTrackTypeFromTabPane(track.closest('.tab-pane')),\n                label: track.querySelector(SELECTORS.TRACK_LABEL_INPUT).value ||\n                    track.querySelector(SELECTORS.TRACK_LANG_INPUT).value,\n                srclang: track.querySelector(SELECTORS.TRACK_LANG_INPUT).value,\n                defaultTrack: track.querySelector(SELECTORS.TRACK_DEFAULT_SELECT).checked ? \"true\" : null\n        })).filter((track) => !!track.track);\n\n        const sources = Array.from(tab.querySelectorAll(SELECTORS.MEDIA_SOURCE + ' ' + SELECTORS.URL_INPUT))\n            .filter((source) => !!source.value)\n            .map((source) => source.value);\n\n        return {\n            sources,\n            description: tab.querySelector(SELECTORS.MEDIA_SOURCE + ' ' + SELECTORS.URL_INPUT).value || false,\n            tracks,\n            showControls: tab.querySelector(SELECTORS.MEDIA_CONTROLS_TOGGLE).checked,\n            autoplay: tab.querySelector(SELECTORS.MEDIA_AUTOPLAY_TOGGLE).checked,\n            muted: tab.querySelector(SELECTORS.MEDIA_MUTE_TOGGLE).checked,\n            loop: tab.querySelector(SELECTORS.MEDIA_LOOP_TOGGLE).checked,\n            title: tab.querySelector(SELECTORS.TITLE_INPUT).value || false\n        };\n    }\n\n    getFilepickerTypeFromElement(element) {\n        if (element.closest(SELECTORS.POSTER_SOURCE)) {\n            return 'image';\n        }\n        if (element.closest(SELECTORS.TRACK_SOURCE)) {\n            return 'subtitle';\n        }\n\n        return 'media';\n    }\n\n    async clickHandler(e) {\n        const element = e.target;\n\n        const mediaBrowser = element.closest(SELECTORS.MEDIA_BROWSER);\n        if (mediaBrowser) {\n            e.preventDefault();\n            const fpType = this.getFilepickerTypeFromElement(element);\n            const params = await displayFilepicker(this.editor, fpType);\n            this.filePickerCallback(params, element, fpType);\n        }\n\n        const addComponentSourceAction = element.closest(SELECTORS.MEDIA_SOURCE + ' .addcomponent');\n        if (addComponentSourceAction) {\n            e.preventDefault();\n            this.addMediaSourceComponent(element);\n        }\n\n        const removeComponentSourceAction = element.closest(SELECTORS.MEDIA_SOURCE + ' .removecomponent');\n        if (removeComponentSourceAction) {\n            e.preventDefault();\n            this.removeMediaSourceComponent(element);\n        }\n\n        const addComponentTrackAction = element.closest(SELECTORS.TRACK + ' .addcomponent');\n        if (addComponentTrackAction) {\n            e.preventDefault();\n            this.addTrackComponent(element);\n        }\n\n        const removeComponentTrackAction = element.closest(SELECTORS.TRACK + ' .removecomponent');\n        if (removeComponentTrackAction) {\n            e.preventDefault();\n            this.removeTrackComponent(element);\n        }\n\n        // Only allow one track per tab to be selected as \"default\".\n        const trackDefaultAction = element.closest(SELECTORS.TRACK_DEFAULT_SELECT);\n        if (trackDefaultAction && trackDefaultAction.checked) {\n            const getKind = el => {\n                return this.getTrackTypeFromTabPane(el.parentElement.closest('.tab-pane'));\n            };\n\n            element.parentElement\n                .closest('.root.tab-content')\n                .querySelectorAll(SELECTORS.TRACK_DEFAULT_SELECT)\n                .forEach(select => {\n                    if (select !== element && getKind(element) === getKind(select)) {\n                        select.checked = false;\n                    }\n                });\n        }\n    }\n\n    async handleDialogueSubmission(event, modal) {\n        const {html} = await this.getMediaHTML(modal.getRoot()[0]);\n        if (html) {\n            this.editor.insertContent(html);\n        }\n    }\n\n    registerEventListeners(modal) {\n        const $root = modal.getRoot();\n        const root = $root[0];\n        if (this.canShowFilePicker) {\n            root.addEventListener('click', this.clickHandler.bind(this));\n        }\n\n        $root.on(ModalEvents.save, this.handleDialogueSubmission.bind(this));\n    }\n};\n"],"names":["MEDIA_TYPES","LINK","VIDEO","AUDIO","TRACK_KINDS","SUBTITLES","CAPTIONS","DESCRIPTIONS","CHAPTERS","METADATA","CSS","FORM","SOURCE","TRACK","MEDIA_SOURCE","MEDIA_BROWSER","LINK_SOURCE","POSTER_SOURCE","TRACK_SOURCE","DISPLAY_OPTIONS","NAME_INPUT","TITLE_INPUT","URL_INPUT","POSTER_SIZE","LINK_SIZE","WIDTH_INPUT","HEIGHT_INPUT","TRACK_KIND_INPUT","TRACK_LABEL_INPUT","TRACK_LANG_INPUT","TRACK_DEFAULT_SELECT","MEDIA_CONTROLS_TOGGLE","MEDIA_AUTOPLAY_TOGGLE","MEDIA_MUTE_TOGGLE","MEDIA_LOOP_TOGGLE","ADVANCED_SETTINGS","INPUTSUBMIT","toLowerCase","TRACK_SUBTITLES","TRACK_CAPTIONS","TRACK_DESCRIPTIONS","TRACK_CHAPTERS","TRACK_METADATA","SELECTORS","LINK_TAB","LINK_PANE","VIDEO_TAB","VIDEO_PANE","AUDIO_TAB","AUDIO_PANE","TRACK_SUBTITLES_TAB","TRACK_SUBTITLES_PANE","TRACK_CAPTIONS_TAB","TRACK_CAPTIONS_PANE","TRACK_DESCRIPTIONS_TAB","TRACK_DESCRIPTIONS_PANE","TRACK_CHAPTERS_TAB","TRACK_CHAPTERS_PANE","TRACK_METADATA_TAB","TRACK_METADATA_PANE","constructor","editor","addSourceHelpString","tracksHelpString","subtitlesHelpString","captionsHelpString","descriptionsHelpString","chaptersHelpString","metadataHelpString","map","key","component","languages","this","prepareMoodleLang","elementid","getElement","id","showfilepicker","canShowFilePicker","addsourcehelpicon","text","trackshelpicon","subtitleshelpicon","captionshelpicon","descriptionshelpicon","chaptershelpicon","metadatahelpicon","langsinstalled","installed","langsavailable","available","modal","ModalFactory","create","type","Modal","TYPE","title","templateContext","getTemplateContext","removeOnClose","large","applyMediumProperties","registerEventListeners","show","getSelectedMedia","mediaElm","selection","getNode","nodeName","querySelector","getMediumProperties","boolAttr","elem","attr","hasAttribute","getAttribute","tracks","subtitles","captions","descriptions","chapters","metadata","sources","medium","querySelectorAll","forEach","track","push","src","srclang","label","defaultTrack","source","poster","width","height","autoplay","loop","muted","controls","getBody","root","getRoot","properties","applyTrackProperties","value","checked","paneId","tabPane","slice","addMediaSourceComponent","newComponent","Object","entries","trackData","length","paneSelector","toUpperCase","addTrackComponent","mediumType","getMediumTypeFromTabPane","parentElement","classList","remove","item","add","moodleLangs","currentLang","currentlang","_ref","lang","code","_ref2","getMoodleLangObj","subtitleLang","filePickerCallback","params","element","fpType","url","closest","file","split","langObj","trim","callback","sourceElement","clone","cloneNode","parentNode","insertBefore","nextSibling","removeMediaSourceComponent","trackElement","removeTrackComponent","getTrackTypeFromTabPane","getMediaHTML","form","tabContent","substr","getMediaHTMLLink","tab","context","name","Templates","renderForPromise","getMediaHTMLVideo","getContextForMediaHTML","getMediaHTMLAudio","Array","from","kind","filter","description","showControls","getFilepickerTypeFromElement","e","target","preventDefault","trackDefaultAction","getKind","el","select","event","html","insertContent","$root","addEventListener","clickHandler","bind","on","ModalEvents","save","handleDialogueSubmission"],"mappings":"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"}