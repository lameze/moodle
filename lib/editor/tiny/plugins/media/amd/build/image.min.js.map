{"version":3,"file":"image.min.js","sources":["../src/image.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Media plugin Image class for Moodle.\n *\n * @module      tiny_media/image\n * @copyright   2022 Huong Nguyen <huongnv13@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport {get_string as getString, get_strings as getStrings} from 'core/str';\nimport * as ModalFactory from 'core/modal_factory';\nimport {displayFilepicker} from 'editor_tiny/utils';\nimport Selectors from './selectors';\nimport Modal from './imagemodal';\nimport {getImagePermissions} from './options';\nimport {component} from \"./common\";\n\nexport const MediaImage = class {\n\n    DEFAULTS = {\n        WIDTH: 160,\n        HEIGHT: 160,\n    };\n\n    form = null;\n    rawImageDimensions = null;\n    canShowFilePicker = false;\n    editor = null;\n    currentModal = null;\n    selectedImage = null;\n    imageAlignment = null;\n\n    constructor(editor) {\n        const permissions = getImagePermissions(editor);\n        this.canShowFilePicker = permissions.filepicker;\n        this.editor = editor;\n    }\n\n    async displayDialogue() {\n        // Reset the image dimensions.\n        this.rawImageDimensions = null;\n\n        const currentImageData = await this.getCurrentImageData();\n        const modal = await ModalFactory.create({\n            type: Modal.TYPE,\n            title: getString('imageproperties', 'tiny_media'),\n            templateContext: await this.getTemplateContext(currentImageData),\n            removeOnClose: true,\n            large: true,\n        });\n\n        this.currentModal = modal;\n        if (currentImageData) {\n            this.loadPreviewImage(currentImageData.src);\n        }\n\n        await this.registerEventListeners(modal);\n        modal.show();\n    }\n\n    async getAlignmentTitles() {\n        if (!this.alignmentTitles) {\n            const [top, middle, bottom, left, right] = await getStrings([\n                'alignment_top',\n                'alignment_middle',\n                'alignment_bottom',\n                'alignment_left',\n                'alignment_right',\n            ].map((key) => ({key, component})));\n\n            this.alignmentTitles = {\n                top,\n                middle,\n                bottom,\n                left,\n                right,\n            };\n        }\n\n        return this.alignmentTitles;\n    }\n\n    async getImageAlignment(selected = '') {\n        const titles = await this.getAlignmentTitles();\n        const alignments = [\n            {\n                text: titles.top,\n                value: 'text-top'\n            },\n            {\n                text: titles.middle,\n                value: 'middle'\n            },\n            {\n                text: titles.bottom,\n                value: 'text-bottom'\n            },\n            {\n                text: titles.left,\n                value: 'left'\n            },\n            {\n                text: titles.right,\n                value: 'right'\n            },\n        ];\n\n        if (selected) {\n            alignments.forEach((alignment, index, array) => {\n                if (alignment.value === selected) {\n                    array[index].selected = true;\n                }\n            });\n        }\n\n        return alignments;\n    }\n\n    async getTemplateContext(data) {\n        return Object.assign({}, {\n            elementid: this.editor.id,\n            showfilepicker: this.canShowFilePicker,\n            alignoptions: await this.getImageAlignment(),\n        }, data);\n    }\n\n    async getCurrentImageData() {\n        const selectedImageProperties = this.getSelectedImageProperties();\n        if (!selectedImageProperties) {\n            return {};\n        }\n\n        const properties = Object.assign({}, selectedImageProperties);\n        if (properties.align) {\n            properties.alignoptions = await this.getImageAlignment(properties.align);\n        }\n\n        if (properties.src) {\n            properties.haspreview = true;\n        }\n\n        if (!properties.alt) {\n            properties.presentation = true;\n        }\n\n        return properties;\n    }\n\n    filePickerCallback(params, self) {\n        if (params.url !== '') {\n            const input = self.form.querySelector(Selectors.IMAGE.elements.url);\n            input.value = params.url;\n\n            // Auto set the width and height.\n            self.form.querySelector(Selectors.IMAGE.elements.width).value = '';\n            self.form.querySelector(Selectors.IMAGE.elements.height).value = '';\n\n            // Load the preview image.\n            self.loadPreviewImage(params.url);\n        }\n    }\n\n    storeImageDimensions(image) {\n        // Store dimensions of the raw image, falling back to defaults for images without dimensions (e.g. SVG).\n        this.rawImageDimensions = {\n            width: image.width || this.DEFAULTS.WIDTH,\n            height: image.height || this.DEFAULTS.HEIGHT,\n        };\n\n        const getCurrentWidth = (element) => {\n            if (element.value === '') {\n                element.value = this.rawImageDimensions.width;\n            }\n            return element.value;\n        };\n        const getCurrentHeight = (element) => {\n            if (element.value === '') {\n                element.value = this.rawImageDimensions.height;\n            }\n            return element.value;\n        };\n\n        const widthInput = this.form.querySelector(Selectors.IMAGE.elements.width);\n        const currentWidth = getCurrentWidth(widthInput);\n\n        const heightInput = this.form.querySelector(Selectors.IMAGE.elements.height);\n        const currentHeight = getCurrentHeight(heightInput);\n\n        const preview = this.form.querySelector(Selectors.IMAGE.elements.preview);\n        preview.setAttribute('src', image.src);\n        preview.style.display = 'inline';\n\n        const constrain = this.form.querySelector(Selectors.IMAGE.elements.constrain);\n        if (this.isPercentageValue(currentWidth) && this.isPercentageValue(currentHeight)) {\n            constrain.checked = currentWidth === currentHeight;\n        } else if (image.width === 0 || image.height === 0) {\n            // If we don't have both dimensions of the image, we can't auto-size it, so disable control.\n            constrain.disabled = 'disabled';\n        } else {\n            // This is the same as comparing to 3 decimal places.\n            const widthRatio = Math.round(1000 * parseInt(currentWidth, 10) / image.width);\n            const heightRatio = Math.round(1000 * parseInt(currentHeight, 10) / image.height);\n            constrain.checked = widthRatio === heightRatio;\n        }\n    }\n\n    loadPreviewImage(url) {\n        const image = new Image();\n\n        image.addEventListener('error', () => {\n            const preview = this.form.querySelector(Selectors.IMAGE.elements.preview);\n            preview.style.display = 'none';\n        });\n        image.addEventListener('load', () => {\n            this.storeImageDimensions(image);\n            this.autoAdjustSize();\n        });\n\n        image.src = url;\n    }\n\n    urlChanged() {\n        const input = this.form.querySelector(Selectors.IMAGE.elements.url);\n\n        if (input.value !== '') {\n            // Load the preview image.\n            this.loadPreviewImage(input.value);\n        }\n    }\n\n    hasErrorUrlField() {\n        const url = this.form.querySelector(Selectors.IMAGE.elements.url).value;\n        const urlError = url === '';\n        this.toggleVisibility(Selectors.IMAGE.elements.urlWarning, urlError);\n        this.toggleAriaInvalid([Selectors.IMAGE.elements.url], urlError);\n\n        return urlError;\n    }\n\n    hasErrorAltField() {\n        const alt = this.form.querySelector(Selectors.IMAGE.elements.alt).value;\n        const presentation = this.form.querySelector(Selectors.IMAGE.elements.presentation).checked;\n        const imageAltError = alt === '' && !presentation;\n        this.toggleVisibility(Selectors.IMAGE.elements.altWarning, imageAltError);\n        this.toggleAriaInvalid([Selectors.IMAGE.elements.alt, Selectors.IMAGE.elements.presentation], imageAltError);\n\n        return imageAltError;\n    }\n\n    toggleVisibility(selector, predicate) {\n        const elements = this.form.querySelectorAll(selector);\n        elements.forEach((element) => {\n            element.style.display = predicate ? 'block' : 'none';\n        });\n    }\n\n    toggleAriaInvalid(selectors, predicate) {\n        selectors.forEach((selector) => {\n            const elements = this.form.querySelectorAll(selector);\n            elements.forEach((element) => element.setAttribute('aria-invalid', predicate));\n        });\n    }\n\n    getAlignmentClass(alignment) {\n        return `${Selectors.IMAGE.elements.alignSettings}_${alignment}`;\n    }\n\n    updateWarning() {\n        const urlError = this.hasErrorUrlField();\n        const imageAltError = this.hasErrorAltField();\n\n        return urlError || imageAltError;\n    }\n\n    getImageContext() {\n        // Check if there are any accessibility issues.\n        if (this.updateWarning()) {\n            return null;\n        }\n\n        const classList = [];\n\n        const constrain = this.form.querySelector(Selectors.IMAGE.elements.constrain).value;\n        if (constrain) {\n            classList.push(Selectors.IMAGE.styles.responsive);\n        }\n\n        // Add the alignment class for the image.\n        const alignment = this.getAlignmentClass(this.form.querySelector(Selectors.IMAGE.elements.alignment).value);\n        classList.push(alignment);\n\n        return {\n            url: this.form.querySelector(Selectors.IMAGE.elements.url).value,\n            alt: this.form.querySelector(Selectors.IMAGE.elements.alt).value,\n            width: this.form.querySelector(Selectors.IMAGE.elements.width).value,\n            height: this.form.querySelector(Selectors.IMAGE.elements.height).value,\n            presentation: this.form.querySelector(Selectors.IMAGE.elements.presentation).checked,\n            customStyle: this.form.querySelector(Selectors.IMAGE.elements.customStyle).value,\n            classlist: classList.join(' '),\n        };\n    }\n\n    setImage() {\n        const url = this.form.querySelector(Selectors.IMAGE.elements.url).value;\n        if (url === '') {\n            return;\n        }\n\n        // Check if there are any accessibility issues.\n        if (this.updateWarning()) {\n            return;\n        }\n\n        // Check for invalid width or height.\n        const width = this.form.querySelector(Selectors.IMAGE.elements.width).value;\n        if (!this.isPercentageValue(width) && isNaN(parseInt(width, 10))) {\n            this.form.querySelector(Selectors.IMAGE.elements.width).focus();\n            return;\n        }\n\n        const height = this.form.querySelector(Selectors.IMAGE.elements.height).value;\n        if (!this.isPercentageValue(height) && isNaN(parseInt(height, 10))) {\n            this.form.querySelector(Selectors.IMAGE.elements.height).focus();\n            return;\n        }\n\n        Templates.render('tiny_media/image', this.getImageContext())\n        .then((html) => {\n            this.editor.insertContent(html);\n            this.currentModal.destroy();\n\n            return html;\n        })\n        .catch();\n    }\n\n    handleKeyupCharacterCount() {\n        const alt = this.form.querySelector(Selectors.IMAGE.elements.alt).value;\n        const current = this.form.querySelector('#currentcount');\n        current.innerHTML = alt.length;\n    }\n\n    autoAdjustSize(forceHeight = false) {\n        // If we do not know the image size, do not do anything.\n        if (!this.rawImageDimensions) {\n            return;\n        }\n\n        const widthField = this.form.querySelector(Selectors.IMAGE.elements.width);\n        const heightField = this.form.querySelector(Selectors.IMAGE.elements.height);\n        const normalizeFieldData = (fieldData) => {\n            fieldData.isPercentageValue = !!this.isPercentageValue(fieldData.field.value);\n            if (fieldData.isPercentageValue) {\n                fieldData.percentValue = parseInt(fieldData.field.value, 10);\n                fieldData.pixelSize = this.rawImageDimensions[fieldData.type] / 100 * fieldData.percentValue;\n            } else {\n                fieldData.pixelSize = parseInt(fieldData.field.value, 10);\n                fieldData.percentValue = fieldData.pixelSize / this.rawImageDimensions[fieldData.type] * 100;\n            }\n\n            return fieldData;\n        };\n\n        const getKeyField = () => {\n            const getValue = () => {\n                if (forceHeight) {\n                    return {\n                        field: heightField,\n                        type: 'height',\n                    };\n                } else {\n                    return {\n                        field: widthField,\n                        type: 'width',\n                    };\n                }\n            };\n\n            const currentValue = getValue();\n            if (currentValue.field.value === '') {\n                currentValue.field.value = this.rawImageDimensions[currentValue.type];\n            }\n\n            return normalizeFieldData(currentValue);\n        };\n\n        const getRelativeField = () => {\n            if (forceHeight) {\n                return normalizeFieldData({\n                    field: widthField,\n                    type: 'width',\n                });\n            } else {\n                return normalizeFieldData({\n                    field: heightField,\n                    type: 'height',\n                });\n            }\n        };\n\n\n        const setImageDimensions = (image, keyField, relativeField, forceHeight = false) => {\n            const getStyleValue = (field) => field.isPercentageValue ? `${field.percentValue}%` : `${field.pixelSize}px`;\n\n            // If the values are constrained, then only update the width.\n            if (forceHeight) {\n                if (keyField.type === 'width') {\n                    image.style.width = getStyleValue(keyField);\n                } else {\n                    image.style.width = getStyleValue(relativeField);\n                }\n            } else {\n                image.style[keyField.type] = getStyleValue(keyField);\n                image.style[relativeField.type] = getStyleValue(relativeField);\n            }\n        };\n\n        const imagePreview = this.form.querySelector(Selectors.IMAGE.elements.preview);\n        // Clear the existing preview sizes.\n        imagePreview.style.width = '';\n        imagePreview.style.height = '';\n\n        // Now update with the new values.\n        const constrainField = this.form.querySelector(Selectors.IMAGE.elements.constrain);\n        const keyField = getKeyField();\n        const relativeField = getRelativeField();\n        if (constrainField.checked) {\n            // We are keeping the image in proportion.\n            // Calculate the size for the relative field.\n            if (keyField.isPercentageValue) {\n                // In proportion, so the percentages are the same.\n                relativeField.field.value = keyField.field.value;\n                relativeField.percentValue = keyField.percentValue;\n            } else {\n                relativeField.pixelSize = Math.round(\n                    keyField.pixelSize / this.rawImageDimensions[keyField.type] * this.rawImageDimensions[relativeField.type]\n                );\n                relativeField.field.value = relativeField.pixelSize;\n            }\n        }\n        setImageDimensions(imagePreview, keyField, relativeField, !!constrainField.checked);\n    }\n\n    getSelectedImageProperties() {\n        const image = this.getSelectedImage();\n        if (!image) {\n            this.selectedImage = null;\n            return null;\n        }\n\n        const properties = {\n            src: null,\n            alt: null,\n            width: null,\n            height: null,\n            align: '',\n            presentation: false,\n        };\n\n        const getImageHeight = (image) => {\n            if (!this.isPercentageValue(String(image.height))) {\n                return parseInt(image.height, 10);\n            }\n\n            return image.height;\n        };\n\n        const getImageWidth = (image) => {\n            if (!this.isPercentageValue(String(image.width))) {\n                return parseInt(image.width, 10);\n            }\n\n            return image.width;\n        };\n\n        // Get the current selection.\n        this.removeLegacyAlignment(image);\n        this.selectedImage = image;\n\n        properties.customstyle = image.style;\n\n        const width = getImageWidth(image);\n        if (width !== 0) {\n            properties.width = width;\n        }\n\n        const height = getImageHeight(image);\n        if (height !== 0) {\n            properties.height = height;\n        }\n\n        const alignment = this.getAlignmentProperties(image, properties);\n        if (alignment) {\n            properties.align = alignment.value;\n        }\n\n        properties.src = image.getAttribute('src');\n        properties.alt = image.getAttribute('alt') || '';\n        properties.presentation = (image.getAttribute('role') === 'presentation');\n\n        return properties;\n    }\n\n    removeLegacyAlignment(imageNode) {\n        if (!imageNode.style.margin) {\n            // There is no margin therefore this cannot match any known alignments.\n            return imageNode;\n        }\n\n        Selectors.IMAGE.alignments.some(alignment => {\n            if (imageNode.style[alignment.name] !== alignment.value) {\n                // The name/value do not match. Skip.\n                return false;\n            }\n            const normalisedNode = document.createElement('div');\n            normalisedNode.style.margin = alignment.margin;\n            if (imageNode.style.margin !== normalisedNode.style.margin) {\n                // The margin does not match.\n                return false;\n            }\n\n            imageNode.classList.add(this.getAlignmentClass(alignment.value));\n            imageNode.style[alignment.name] = null;\n            imageNode.style.margin = null;\n\n            return true;\n        });\n\n        return imageNode;\n    }\n\n    getAlignmentProperties(image) {\n        const currentAlignment = Selectors.IMAGE.alignments.find((alignment) => {\n            return image.classList.contains(this.getAlignmentClass(alignment.value));\n        });\n        if (currentAlignment) {\n            return currentAlignment;\n        }\n\n        return Selectors.IMAGE.alignments.find((alignment) => alignment.isDefault);\n    }\n\n    getSelectedImage() {\n        const imgElm = this.editor.selection.getNode();\n        const figureElm = this.editor.dom.getParent(imgElm, 'figure.image');\n        if (figureElm) {\n            return this.editor.dom.select('img', figureElm)[0];\n        }\n\n        if (imgElm && (imgElm.nodeName.toUpperCase() !== 'IMG' || this.isPlaceholderImage(imgElm))) {\n            return null;\n        }\n        return imgElm;\n    }\n\n    isPlaceholderImage(imgElm) {\n        if (imgElm.nodeName.toUpperCase() !== 'IMG') {\n            return false;\n        }\n\n        return (imgElm.hasAttribute('data-mce-object') || imgElm.hasAttribute('data-mce-placeholder'));\n    }\n\n    isPercentageValue(value) {\n        return value.match(/\\d+%/);\n    }\n\n    async registerEventListeners(modal) {\n        await modal.getBody();\n        const root = modal.getRoot()[0];\n\n        this.form = root.querySelector(Selectors.IMAGE.elements.form);\n        root.addEventListener('click', (e) => {\n            const submitAction = e.target.closest(Selectors.IMAGE.actions.submit);\n            const imageBrowserAction = e.target.closest(Selectors.IMAGE.actions.imageBrowser);\n            if (submitAction) {\n                e.preventDefault();\n                this.setImage();\n            }\n            if (imageBrowserAction && this.canShowFilePicker) {\n                e.preventDefault();\n                displayFilepicker(this.editor, 'image').then((params) => {\n                    const self = this;\n                    this.filePickerCallback(params, self);\n\n                    return;\n                }).catch();\n            }\n        });\n\n        root.addEventListener('change', (e) => {\n            const urlEle = e.target.closest(Selectors.IMAGE.elements.url);\n            if (urlEle) {\n                this.hasErrorUrlField();\n            }\n\n            const presentationEle = e.target.closest(Selectors.IMAGE.elements.presentation);\n            if (presentationEle) {\n                this.hasErrorAltField();\n            }\n\n            const constrainEle = e.target.closest(Selectors.IMAGE.elements.constrain);\n            if (constrainEle) {\n                this.autoAdjustSize(true);\n            }\n        });\n\n        root.addEventListener('blur', (e) => {\n            if (e.target.nodeType === Node.ELEMENT_NODE) {\n                const urlEle = e.target.closest(Selectors.IMAGE.elements.url);\n                if (urlEle) {\n                    this.urlChanged();\n                }\n\n                const altEle = e.target.closest(Selectors.IMAGE.elements.alt);\n                if (altEle) {\n                    this.hasErrorAltField();\n                }\n\n                const widthEle = e.target.closest(Selectors.IMAGE.elements.width);\n                if (widthEle) {\n                    this.autoAdjustSize();\n                }\n\n                const heightEle = e.target.closest(Selectors.IMAGE.elements.height);\n                if (heightEle) {\n                    this.autoAdjustSize(true);\n                }\n            }\n        }, true);\n\n        // Character count.\n        root.addEventListener('keyup', (e) => {\n            const altEle = e.target.closest(Selectors.IMAGE.elements.alt);\n            if (altEle) {\n                this.handleKeyupCharacterCount();\n            }\n        });\n    }\n};\n"],"names":["constructor","editor","WIDTH","HEIGHT","permissions","canShowFilePicker","filepicker","rawImageDimensions","currentImageData","this","getCurrentImageData","modal","ModalFactory","create","type","Modal","TYPE","title","templateContext","getTemplateContext","removeOnClose","large","currentModal","loadPreviewImage","src","registerEventListeners","show","alignmentTitles","top","middle","bottom","left","right","map","key","component","selected","titles","getAlignmentTitles","alignments","text","value","forEach","alignment","index","array","data","Object","assign","elementid","id","showfilepicker","alignoptions","getImageAlignment","selectedImageProperties","getSelectedImageProperties","properties","align","haspreview","alt","presentation","filePickerCallback","params","self","url","form","querySelector","Selectors","IMAGE","elements","width","height","storeImageDimensions","image","DEFAULTS","currentWidth","element","getCurrentWidth","currentHeight","getCurrentHeight","preview","setAttribute","style","display","constrain","isPercentageValue","checked","disabled","widthRatio","Math","round","parseInt","heightRatio","Image","addEventListener","autoAdjustSize","urlChanged","input","hasErrorUrlField","urlError","toggleVisibility","urlWarning","toggleAriaInvalid","hasErrorAltField","imageAltError","altWarning","selector","predicate","querySelectorAll","selectors","getAlignmentClass","alignSettings","updateWarning","getImageContext","classList","push","styles","responsive","customStyle","classlist","join","setImage","isNaN","focus","render","then","html","insertContent","destroy","catch","handleKeyupCharacterCount","innerHTML","length","forceHeight","widthField","heightField","normalizeFieldData","fieldData","field","percentValue","pixelSize","imagePreview","constrainField","keyField","currentValue","getKeyField","relativeField","getStyleValue","setImageDimensions","getSelectedImage","selectedImage","removeLegacyAlignment","customstyle","String","getImageWidth","getImageHeight","getAlignmentProperties","getAttribute","imageNode","margin","some","name","normalisedNode","document","createElement","add","currentAlignment","find","contains","isDefault","imgElm","selection","getNode","figureElm","dom","getParent","select","nodeName","toUpperCase","isPlaceholderImage","hasAttribute","match","getBody","root","getRoot","e","submitAction","target","closest","actions","submit","imageBrowserAction","imageBrowser","preventDefault","nodeType","Node","ELEMENT_NODE"],"mappings":"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"}