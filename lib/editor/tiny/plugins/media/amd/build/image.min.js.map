{"version":3,"file":"image.min.js","sources":["../src/image.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Media plugin Image class for Moodle.\n *\n * @module      tiny_media/image\n * @copyright   2022 Huong Nguyen <huongnv13@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport {get_string as getString} from 'core/str';\nimport * as Modal from 'core/modal_factory';\nimport * as ModalEvents from 'core/modal_events';\nimport {displayFilepicker} from 'editor_tiny/utils';\n\nexport const MediaImage = class {\n\n    CSS = {\n        FORM: 'form.tiny_image_form',\n        RESPONSIVE: 'img-fluid',\n        INPUTALIGNMENT: 'tiny_image_alignment',\n        INPUTALT: 'tiny_image_altentry',\n        INPUTHEIGHT: 'tiny_image_heightentry',\n        INPUTSUBMIT: 'tiny_image_urlentrysubmit',\n        INPUTURL: 'tiny_image_urlentry',\n        INPUTSIZE: 'tiny_image_size',\n        INPUTWIDTH: 'tiny_image_widthentry',\n        IMAGEALTWARNING: 'tiny_image_altwarning',\n        IMAGEURLWARNING: 'tiny_image_urlwarning',\n        IMAGEBROWSER: 'openimagebrowser',\n        IMAGEPRESENTATION: 'tiny_image_presentation',\n        INPUTCONSTRAIN: 'tiny_image_constrain',\n        INPUTCUSTOMSTYLE: 'tiny_image_customstyle',\n        IMAGEPREVIEW: 'tiny_image_preview',\n        IMAGEPREVIEWBOX: 'tiny_image_preview_box',\n        ALIGNSETTINGS: 'tiny_image_button'\n    };\n\n    FORMNAMES = {\n        URL: 'urlentry',\n        ALT: 'altentry'\n    };\n\n    REGEX = {\n        ISPERCENT: /\\d+%/\n    };\n\n    DEFAULTS = {\n        WIDTH: 160,\n        HEIGHT: 160,\n    };\n\n    ALIGNMENTS = [\n        // Vertical alignment.\n        {\n            name: 'verticalAlign',\n            str: 'alignment_top',\n            value: 'text-top',\n            margin: '0 0.5em'\n        },\n        {\n            name: 'verticalAlign',\n            str: 'alignment_middle',\n            value: 'middle',\n            margin: '0 0.5em'\n        },\n        {\n            name: 'verticalAlign',\n            str: 'alignment_bottom',\n            value: 'text-bottom',\n            margin: '0 0.5em',\n            isDefault: true\n        },\n\n        // Floats.\n        {\n            name: 'float',\n            str: 'alignment_left',\n            value: 'left',\n            margin: '0 0.5em 0 0'\n        },\n        {\n            name: 'float',\n            str: 'alignment_right',\n            value: 'right',\n            margin: '0 0 0 0.5em'\n        }\n    ];\n\n    form = null;\n    rawImageDimensions = null;\n    canShowFilePicker = true;\n    editor = null;\n    currentModal = null;\n    selectedImage = null;\n\n    constructor(editor) {\n        this.editor = editor;\n    }\n\n    displayDialogue() {\n        // Reset the image dimensions.\n        this.rawImageDimensions = null;\n\n        Modal.create({\n            type: Modal.types.DEFAULT,\n            title: getString('imageproperties', 'tiny_media'),\n            body: Templates.render('tiny_media/insert_image', {\n                elementid: this.editor.getElement().id,\n                CSS: this.CSS,\n                FORMNAMES: this.FORMNAMES,\n                showfilepicker: this.canShowFilePicker\n            })\n        }).then(modal => {\n            this.currentModal = modal;\n            modal.getRoot().on(ModalEvents.bodyRendered, () => {\n                this.form = document.querySelector(this.CSS.FORM);\n                // Configure the view of the current image.\n                this.applyImageProperties();\n                this.registerEventListeners();\n            });\n            modal.getRoot().on(ModalEvents.hidden, () => {\n                modal.destroy();\n            });\n            modal.show();\n            return modal;\n        });\n    }\n\n    filePickerCallback(params, self) {\n        if (params.url !== '') {\n            const input = self.form.querySelector('.' + self.CSS.INPUTURL);\n            input.value = params.url;\n\n            // Auto set the width and height.\n            self.form.querySelector('.' + self.CSS.INPUTWIDTH).value = '';\n            self.form.querySelector('.' + self.CSS.INPUTHEIGHT).value = '';\n\n            // Load the preview image.\n            self.loadPreviewImage(params.url);\n        }\n    }\n\n    loadPreviewImage(url) {\n        const image = new Image();\n\n        image.onerror = () => {\n            const preview = this.form.querySelector('.' + CSS.IMAGEPREVIEW);\n            preview.style.display = 'none';\n        };\n\n        image.onload = () => {\n            let input, currentWidth, currentHeight, widthRatio, heightRatio;\n\n            // Store dimensions of the raw image, falling back to defaults for images without dimensions (e.g. SVG).\n            this.rawImageDimensions = {\n                width: image.width || this.DEFAULTS.WIDTH,\n                height: image.height || this.DEFAULTS.HEIGHT,\n            };\n\n            input = this.form.querySelector('.' + this.CSS.INPUTWIDTH);\n            currentWidth = input.value;\n            if (currentWidth === '') {\n                input.value = this.rawImageDimensions.width;\n                currentWidth = \"\" + this.rawImageDimensions.width;\n            }\n\n            input = this.form.querySelector('.' + this.CSS.INPUTHEIGHT);\n            currentHeight = input.value;\n            if (currentHeight === '') {\n                input.value = this.rawImageDimensions.height;\n                currentHeight = \"\" + this.rawImageDimensions.height;\n            }\n\n            input = this.form.querySelector('.' + this.CSS.IMAGEPREVIEW);\n            input.setAttribute('src', image.src);\n            input.style.display = 'inline';\n\n            input = this.form.querySelector('.' + this.CSS.INPUTCONSTRAIN);\n            if (currentWidth.match(this.REGEX.ISPERCENT) && currentHeight.match(this.REGEX.ISPERCENT)) {\n                input.checked = currentWidth === currentHeight;\n            } else if (image.width === 0 || image.height === 0) {\n                // If we don't have both dimensions of the image, we can't auto-size it, so disable control.\n                input.disabled = 'disabled';\n            } else {\n                // This is the same as comparing to 3 decimal places.\n                widthRatio = Math.round(1000 * parseInt(currentWidth, 10) / image.width);\n                heightRatio = Math.round(1000 * parseInt(currentHeight, 10) / image.height);\n                input.checked = widthRatio === heightRatio;\n            }\n        };\n\n        image.src = url;\n    }\n\n    urlChanged() {\n        const input = this.form.querySelector('.' + this.CSS.INPUTURL);\n\n        if (input.value !== '') {\n            // Load the preview image.\n            this.loadPreviewImage(input.value);\n        }\n    }\n\n    hasErrorUrlField() {\n        const url = this.form.querySelector('.' + this.CSS.INPUTURL).value;\n        const urlError = url === '';\n        this.toggleVisibility('.' + this.CSS.IMAGEURLWARNING, urlError);\n        this.toggleAriaInvalid(['.' + this.CSS.INPUTURL], urlError);\n\n        return urlError;\n    }\n\n    hasErrorAltField() {\n        const alt = this.form.querySelector('.' + this.CSS.INPUTALT).value;\n        const presentation = this.form.querySelector('.' + this.CSS.IMAGEPRESENTATION).checked;\n        const imageAltError = alt === '' && !presentation;\n        this.toggleVisibility('.' + this.CSS.IMAGEALTWARNING, imageAltError);\n        this.toggleAriaInvalid(['.' + this.CSS.INPUTALT, '.' + this.CSS.IMAGEPRESENTATION], imageAltError);\n\n        return imageAltError;\n    }\n\n    toggleVisibility(selector, predicate) {\n        const elements = this.form.querySelectorAll(selector);\n        elements.forEach((element) => {\n            element.style.display = predicate ? 'block' : 'none';\n        });\n    }\n\n    toggleAriaInvalid(selectors, predicate) {\n        selectors.forEach((selector) => {\n            const elements = this.form.querySelectorAll(selector);\n            elements.forEach((element) => {\n                element.setAttribute('aria-invalid', predicate);\n            });\n        });\n    }\n\n    getAlignmentClass(alignment) {\n        return this.CSS.ALIGNSETTINGS + '_' + alignment;\n    }\n\n    updateWarning() {\n        const urlError = this.hasErrorUrlField();\n        const imageAltError = this.hasErrorAltField();\n\n        return urlError || imageAltError;\n    }\n\n    setImage(e) {\n        const url = this.form.querySelector('.' + this.CSS.INPUTURL).value,\n            alt = this.form.querySelector('.' + this.CSS.INPUTALT).value,\n            width = this.form.querySelector('.' + this.CSS.INPUTWIDTH).value,\n            height = this.form.querySelector('.' + this.CSS.INPUTHEIGHT).value,\n            alignment = this.getAlignmentClass(this.form.querySelector('.' + this.CSS.INPUTALIGNMENT).value),\n            presentation = this.form.querySelector('.' + this.CSS.IMAGEPRESENTATION).checked,\n            constrain = this.form.querySelector('.' + this.CSS.INPUTCONSTRAIN).value,\n            customStyle = this.form.querySelector('.' + this.CSS.INPUTCUSTOMSTYLE).value;\n        let imageHtml,\n            classList = [];\n\n        e.preventDefault();\n\n        // Check if there are any accessibility issues.\n        if (this.updateWarning()) {\n            return;\n        }\n\n        if (url !== '') {\n            if (constrain) {\n                classList.push(this.CSS.RESPONSIVE);\n            }\n\n            // Add the alignment class for the image.\n            classList.push(alignment);\n\n            if (!width.match(this.REGEX.ISPERCENT) && isNaN(parseInt(width, 10))) {\n                this.form.querySelector('.' + this.CSS.INPUTWIDTH).focus();\n                return;\n            }\n            if (!height.match(this.REGEX.ISPERCENT) && isNaN(parseInt(height, 10))) {\n                this.form.querySelector('.' + this.CSS.INPUTHEIGHT).focus();\n                return;\n            }\n\n            Templates.render('tiny_media/image', {\n                url: url,\n                alt: alt,\n                width: width,\n                height: height,\n                presentation: presentation,\n                customstyle: customStyle,\n                classlist: classList.join(' ')\n            }).then(html => {\n                imageHtml = html;\n                this.editor.insertContent(imageHtml);\n                this.currentModal.destroy();\n            });\n        }\n    }\n\n    handleKeyupCharacterCount() {\n        const alt = this.form.querySelector('.' + this.CSS.INPUTALT).value,\n            current = this.form.querySelector('#currentcount');\n        current.innerHTML = alt.length;\n    }\n\n    autoAdjustSize(e, forceHeight) {\n        forceHeight = forceHeight || false;\n\n        let keyField = this.form.querySelector('.' + this.CSS.INPUTWIDTH),\n            keyFieldType = 'width',\n            subField = this.form.querySelector('.' + this.CSS.INPUTHEIGHT),\n            subFieldType = 'height',\n            constrainField = this.form.querySelector('.' + this.CSS.INPUTCONSTRAIN),\n            keyFieldValue = keyField.value,\n            subFieldValue = subField.value,\n            imagePreview = this.form.querySelector('.' + this.CSS.IMAGEPREVIEW),\n            rawPercentage,\n            rawSize;\n\n        // If we do not know the image size, do not do anything.\n        if (!this.rawImageDimensions) {\n            return;\n        }\n\n        // Set the width back to default if it is empty.\n        if (keyFieldValue === '') {\n            keyFieldValue = this.rawImageDimensions[keyFieldType];\n            keyField.value = keyFieldValue;\n            keyFieldValue = keyField.value;\n        }\n\n        // Clear the existing preview sizes.\n        imagePreview.style.width = null;\n        imagePreview.style.height = null;\n\n        // Now update with the new values.\n        if (!constrainField.checked) {\n            // We are not keeping the image proportion - update the preview accordingly.\n\n            // Width.\n            if (keyFieldValue.match(this.REGEX.ISPERCENT)) {\n                rawPercentage = parseInt(keyFieldValue, 10);\n                rawSize = this.rawImageDimensions.width / 100 * rawPercentage;\n                imagePreview.style.width = rawSize + 'px';\n            } else {\n                imagePreview.style.width = keyFieldValue + 'px';\n            }\n\n            // Height.\n            if (subFieldValue.match(this.REGEX.ISPERCENT)) {\n                rawPercentage = parseInt(subFieldValue, 10);\n                rawSize = this.rawImageDimensions.height / 100 * rawPercentage;\n                imagePreview.style.height = rawSize + 'px';\n            } else {\n                imagePreview.style.height = subFieldValue + 'px';\n            }\n        } else {\n            // We are keeping the image in proportion.\n            if (forceHeight) {\n                // By default we update based on width. Swap the key and sub fields around to achieve a height-based scale.\n                let temporaryValue;\n                temporaryValue = keyField;\n                keyField = subField;\n                subField = temporaryValue;\n\n                temporaryValue = keyFieldType;\n                keyFieldType = subFieldType;\n                subFieldType = temporaryValue;\n\n                temporaryValue = keyFieldValue;\n                keyFieldValue = subFieldValue;\n                subFieldValue = temporaryValue;\n            }\n\n            if (keyFieldValue.match(this.REGEX.ISPERCENT)) {\n                // This is a percentage based change. Copy it verbatim.\n                subFieldValue = keyFieldValue;\n\n                // Set the width to the calculated pixel width.\n                rawPercentage = parseInt(keyFieldValue, 10);\n                rawSize = this.rawImageDimensions.width / 100 * rawPercentage;\n\n                // And apply the width/height to the container.\n                imagePreview.style.width = rawSize;\n                rawSize = this.rawImageDimensions.height / 100 * rawPercentage;\n                imagePreview.style.height = rawSize;\n            } else {\n                // Calculate the scaled subFieldValue from the keyFieldValue.\n                subFieldValue = Math.round((keyFieldValue / this.rawImageDimensions[keyFieldType]) *\n                    this.rawImageDimensions[subFieldType]);\n\n                if (forceHeight) {\n                    imagePreview.style.width = subFieldValue;\n                    imagePreview.style.height = keyFieldValue;\n                } else {\n                    imagePreview.style.width = keyFieldValue;\n                    imagePreview.style.height = subFieldValue;\n                }\n            }\n\n            // Update the subField's value within the form to reflect the changes.\n            subField.value = subFieldValue;\n        }\n    }\n\n    applyImageProperties() {\n        const properties = this.getSelectedImageProperties(),\n            img = this.form.querySelector('.' + this.CSS.IMAGEPREVIEW);\n\n        if (properties === false) {\n            img.style.display = 'none';\n            // Set the default alignment.\n            this.ALIGNMENTS.some(alignment => {\n                if (alignment.isDefault) {\n                    this.form.querySelector('.' + this.CSS.INPUTALIGNMENT).value = alignment.value;\n                    return true;\n                }\n\n                return false;\n            });\n\n            return;\n        }\n\n        if (properties.align) {\n            this.form.querySelector('.' + this.CSS.INPUTALIGNMENT).value = properties.align;\n        }\n        if (properties.customstyle) {\n            this.form.querySelector('.' + this.CSS.INPUTCUSTOMSTYLE).value = properties.customstyle;\n        }\n        if (properties.width) {\n            this.form.querySelector('.' + this.CSS.INPUTWIDTH).value = properties.width;\n        }\n        if (properties.height) {\n            this.form.querySelector('.' + this.CSS.INPUTHEIGHT).value = properties.height;\n        }\n        if (properties.alt) {\n            this.form.querySelector('.' + this.CSS.INPUTALT).value = properties.alt;\n        }\n        if (properties.src) {\n            this.form.querySelector('.' + this.CSS.INPUTURL).value = properties.src;\n            this.loadPreviewImage(properties.src);\n        }\n        if (properties.presentation) {\n            this.form.querySelector('.' + this.CSS.IMAGEPRESENTATION).checked = 'checked';\n        }\n\n        // Update the image preview based on the form properties.\n        this.autoAdjustSize();\n    }\n\n    getSelectedImageProperties() {\n        let properties = {\n                src: null,\n                alt: null,\n                width: null,\n                height: null,\n                align: '',\n                presentation: false\n            },\n\n            // Get the current selection.\n            image = this.getSelectedImage(),\n            width,\n            height,\n            style;\n\n        if (image) {\n            image = this.removeLegacyAlignment(image);\n            this.selectedImage = image;\n\n            style = image.style;\n            properties.customstyle = style;\n\n            width = image.width;\n            if (!String(width).match(this.REGEX.ISPERCENT)) {\n                width = parseInt(width, 10);\n            }\n            height = image.height;\n            if (!String(height).match(this.REGEX.ISPERCENT)) {\n                height = parseInt(height, 10);\n            }\n\n            if (width !== 0) {\n                properties.width = width;\n            }\n            if (height !== 0) {\n                properties.height = height;\n            }\n            this.getAlignmentProperties(image, properties);\n            properties.src = image.getAttribute('src');\n            properties.alt = image.getAttribute('alt') || '';\n            properties.presentation = (image.getAttribute('role') === 'presentation');\n            return properties;\n        }\n\n        // No image selected - clean up.\n        this.selectedImage = null;\n        return false;\n    }\n\n    removeLegacyAlignment(imageNode) {\n        if (!imageNode.style.margin) {\n            // There is no margin therefore this cannot match any known alignments.\n            return imageNode;\n        }\n\n        this.ALIGNMENTS.some(alignment => {\n            if (imageNode.style[alignment.name] !== alignment.value) {\n                // The name/value do not match. Skip.\n                return false;\n            }\n            const normalisedNode = document.createElement('div');\n            normalisedNode.style.margin = alignment.margin;\n            if (imageNode.style.margin !== normalisedNode.style.margin) {\n                // The margin does not match.\n                return false;\n            }\n\n            imageNode.classList.add(this.getAlignmentClass(alignment.value));\n            imageNode.style[alignment.name] = null;\n            imageNode.style.margin = null;\n\n            return true;\n        });\n\n        return imageNode;\n    }\n\n    getAlignmentProperties(image, properties) {\n        let complete = false,\n            defaultAlignment;\n\n        // Check for an alignment value.\n        complete = this.ALIGNMENTS.some(alignment => {\n            const classname = this.getAlignmentClass(alignment.value);\n            if (image.classList.contains(classname)) {\n                properties.align = alignment.value;\n                return true;\n            }\n\n            if (alignment.isDefault) {\n                defaultAlignment = alignment.value;\n            }\n\n            return false;\n        });\n\n        if (!complete && defaultAlignment) {\n            properties.align = defaultAlignment;\n        }\n    }\n\n    getSelectedImage() {\n        const imgElm = this.editor.selection.getNode();\n        const figureElm = this.editor.dom.getParent(imgElm, 'figure.image');\n        if (figureElm) {\n            return this.editor.dom.select('img', figureElm)[0];\n        }\n        if (imgElm && (imgElm.nodeName !== 'IMG' || this.isPlaceholderImage(imgElm))) {\n            return null;\n        }\n        return imgElm;\n    }\n\n    isPlaceholderImage(imgElm) {\n        return imgElm.nodeName === 'IMG' && (imgElm.hasAttribute('data-mce-object') || imgElm.hasAttribute('data-mce-placeholder'));\n    }\n\n    registerEventListeners() {\n        const self = this;\n        this.form.querySelector('.' + this.CSS.INPUTURL).addEventListener('blur', () => {\n            this.urlChanged();\n        });\n        this.form.querySelector('.' + this.CSS.INPUTURL).addEventListener('change', () => {\n            this.hasErrorUrlField();\n        });\n        this.form.querySelector('.' + this.CSS.IMAGEPRESENTATION).addEventListener('change', () => {\n            this.hasErrorAltField();\n        });\n        this.form.querySelector('.' + this.CSS.INPUTALT).addEventListener('blur', () => {\n            this.hasErrorAltField();\n        });\n        this.form.querySelector('.' + this.CSS.INPUTWIDTH).addEventListener('blur', (e) => {\n            this.autoAdjustSize(e);\n        });\n        this.form.querySelector('.' + this.CSS.INPUTHEIGHT).addEventListener('blur', (e) => {\n            this.autoAdjustSize(e, true);\n        });\n\n        this.form.querySelector('.' + this.CSS.INPUTSUBMIT).addEventListener('click', (e) => {\n            this.setImage(e);\n        });\n        if (this.canShowFilePicker) {\n            this.form.querySelector('.' + this.CSS.IMAGEBROWSER).addEventListener('click', (e) => {\n                e.preventDefault();\n                displayFilepicker(this.editor, 'image').then((params) => {\n                    this.filePickerCallback(params, self);\n                }).catch();\n            });\n        }\n        // Character count.\n        this.form.querySelector('.' + this.CSS.INPUTALT).addEventListener('keyup', () => {\n            this.handleKeyupCharacterCount();\n        });\n    }\n};\n\n"],"names":["constructor","editor","FORM","RESPONSIVE","INPUTALIGNMENT","INPUTALT","INPUTHEIGHT","INPUTSUBMIT","INPUTURL","INPUTSIZE","INPUTWIDTH","IMAGEALTWARNING","IMAGEURLWARNING","IMAGEBROWSER","IMAGEPRESENTATION","INPUTCONSTRAIN","INPUTCUSTOMSTYLE","IMAGEPREVIEW","IMAGEPREVIEWBOX","ALIGNSETTINGS","URL","ALT","ISPERCENT","WIDTH","HEIGHT","name","str","value","margin","isDefault","displayDialogue","rawImageDimensions","Modal","create","type","types","DEFAULT","title","body","Templates","render","elementid","this","getElement","id","CSS","FORMNAMES","showfilepicker","canShowFilePicker","then","modal","currentModal","getRoot","on","ModalEvents","bodyRendered","form","document","querySelector","applyImageProperties","registerEventListeners","hidden","destroy","show","filePickerCallback","params","self","url","loadPreviewImage","image","Image","onerror","style","display","onload","input","currentWidth","currentHeight","widthRatio","heightRatio","width","DEFAULTS","height","setAttribute","src","match","REGEX","checked","disabled","Math","round","parseInt","urlChanged","hasErrorUrlField","urlError","toggleVisibility","toggleAriaInvalid","hasErrorAltField","alt","presentation","imageAltError","selector","predicate","querySelectorAll","forEach","element","selectors","getAlignmentClass","alignment","updateWarning","setImage","e","constrain","customStyle","imageHtml","classList","preventDefault","push","isNaN","focus","customstyle","classlist","join","html","insertContent","handleKeyupCharacterCount","innerHTML","length","autoAdjustSize","forceHeight","rawPercentage","rawSize","keyField","keyFieldType","subField","subFieldType","constrainField","keyFieldValue","subFieldValue","imagePreview","temporaryValue","properties","getSelectedImageProperties","img","ALIGNMENTS","some","align","getSelectedImage","removeLegacyAlignment","selectedImage","String","getAlignmentProperties","getAttribute","imageNode","normalisedNode","createElement","add","defaultAlignment","complete","classname","contains","imgElm","selection","getNode","figureElm","dom","getParent","select","nodeName","isPlaceholderImage","hasAttribute","addEventListener","catch"],"mappings":"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"}